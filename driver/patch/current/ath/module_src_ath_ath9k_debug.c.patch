diff --unified --recursive --no-dereference --text --unidirectional-new-file --ignore-trailing-space --ignore-space-change '--exclude=.git' '--exclude=README*' '--exclude=*.pdf' '--exclude=*.svg' '--exclude=*.vim' module_src/ath_orig/ath9k/debug.c module_src/ath/ath9k/debug.c
--- module_src/ath_orig/ath9k/debug.c
+++ module_src/ath/ath9k/debug.c
@@ -926,6 +926,99 @@
 	.llseek = default_llseek,
 };
 
+
+static ssize_t read_file_tx_chainmask(
+	struct file*    file,
+	char __user*    user_buf,
+	size_t          count,
+	loff_t*         ppos)
+{
+	struct ath_hw* ah = file->private_data;
+	char buf[8];
+	u8 len;
+
+	len = sprintf(buf, "%u\n", ah->txchainmask);
+	return simple_read_from_buffer(user_buf, count, ppos, buf, len);
+}
+
+static ssize_t write_file_tx_chainmask(
+	struct file*        file,
+	const char __user*  user_buf,
+	size_t              count,
+	loff_t*             ppos)
+{
+	struct ath_hw* ah = file->private_data;
+	u8 tx_chainmask;
+	char buf[8];
+	u8 len;
+
+	len = min(count, sizeof(buf) - 1);
+	if (copy_from_user(buf, user_buf, len))
+		return -EFAULT;
+
+	buf[len] = '\0';
+	if (kstrtou8(buf, 0, &tx_chainmask))
+		return -EINVAL;
+
+	ah->txchainmask = tx_chainmask;
+	ar9003_hw_set_chain_masks(ah, ah->rxchainmask, ah->txchainmask);
+	return count;
+}
+
+static const struct file_operations fops_tx_chainmask = {
+	.read 	= read_file_tx_chainmask,
+	.write 	= write_file_tx_chainmask,
+	.open 	= simple_open,
+	.owner 	= THIS_MODULE,
+	.llseek = default_llseek,
+};
+
+static ssize_t read_file_rx_chainmask(
+	struct file*    file,
+	char __user*    user_buf,
+	size_t          count,
+	loff_t*         ppos)
+{
+	struct ath_hw* ah = file->private_data;
+	char buf[8];
+	u8 len;
+
+	len = sprintf(buf, "%u\n", ah->rxchainmask);
+	return simple_read_from_buffer(user_buf, count, ppos, buf, len);
+}
+
+static ssize_t write_file_rx_chainmask(
+	struct file*        file,
+	const char __user*  user_buf,
+	size_t              count,
+	loff_t*             ppos)
+{
+	struct ath_hw* ah = file->private_data;
+	u8 rx_chainmask;
+	char buf[8];
+	u8 len;
+
+	len = min(count, sizeof(buf) - 1);
+	if (copy_from_user(buf, user_buf, len))
+		return -EFAULT;
+
+	buf[len] = '\0';
+	if (kstrtou8(buf, 0, &rx_chainmask))
+		return -EINVAL;
+
+	ah->rxchainmask = rx_chainmask;
+	ar9003_hw_set_chain_masks(ah, ah->rxchainmask, ah->txchainmask);
+	return count;
+}
+
+static const struct file_operations fops_rx_chainmask = {
+	.read 	= read_file_rx_chainmask,
+	.write 	= write_file_rx_chainmask,
+	.open 	= simple_open,
+	.owner 	= THIS_MODULE,
+	.llseek = default_llseek,
+};
+
 #define REGDUMP_LINE_SIZE	20
 
 static int open_file_regdump(struct inode *inode, struct file *file)
@@ -1408,10 +1501,25 @@
 	ath9k_cmn_debug_recv(sc->debug.debugfs_phy, &sc->debug.stats.rxstats);
 	ath9k_cmn_debug_phy_err(sc->debug.debugfs_phy, &sc->debug.stats.rxstats);
 
-	debugfs_create_u8("rx_chainmask", 0400, sc->debug.debugfs_phy,
-			  &ah->rxchainmask);
-	debugfs_create_u8("tx_chainmask", 0400, sc->debug.debugfs_phy,
-			  &ah->txchainmask);
+	// Porting note:
+	// S_IRWXU: 0700
+	// S_IWUSR: 0200
+	// see https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/
+	debugfs_create_file(
+		"rx_chainmask",
+		0700 | 0200,
+		sc->debug.debugfs_phy,
+		ah,
+		&fops_rx_chainmask
+	);
+	debugfs_create_file(
+		"tx_chainmask",
+		0700 | 0200,
+		sc->debug.debugfs_phy,
+		ah,
+		&fops_tx_chainmask
+	);
+
 	debugfs_create_file("ani", 0600,
 			    sc->debug.debugfs_phy, sc, &fops_ani);
 	debugfs_create_bool("paprd", 0600, sc->debug.debugfs_phy,
