diff --unified --recursive --no-dereference --text --unidirectional-new-file --ignore-trailing-space --ignore-space-change '--exclude=.git' '--exclude=README*' '--exclude=*.pdf' '--exclude=*.svg' '--exclude=*.vim' module_src/iwlwifi_orig/dvm/csi.c module_src/iwlwifi/dvm/csi.c
--- module_src/iwlwifi_orig/dvm/csi.c
+++ module_src/iwlwifi/dvm/csi.c
@@ -0,0 +1,122 @@
+/******************************************************************************
+ *
+ * GPL LICENSE SUMMARY
+ *
+ * Copyright(c) 2008-2011 Intel Corporation. All rights reserved.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of version 2 of the GNU General Public License as
+ * published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110,
+ * USA
+ *
+ * The full GNU General Public License is included in this distribution
+ * in the file called LICENSE.GPL.
+ *
+ * Contact Information:
+ * Daniel Halperin <dhalperi@cs.washington.edu>
+ * University of Washington CSE, 185 Stevens Way AC101, Seattle, WA 98195-2350
+ * Anmol Sheth <anmol.n.sheth@intel.com>
+ * Intel Labs Seattle, 1100 NE 45th St, Seattle, WA 98105
+ *
+ *****************************************************************************/
+#include <linux/etherdevice.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/sched.h>
+#include <net/mac80211.h>
+
+#include "iwl-io.h"
+#include "iwl-agn-hw.h"
+#include "iwl-trans.h"
+#include "iwl-modparams.h"
+
+#include "dev.h"
+#include "agn.h"
+#include "connector.h"
+#include "csi.h"
+
+void iwlagn_bfee_notif(struct iwl_priv *priv, struct iwl_rx_cmd_buffer *rxb)
+{
+	/*
+	 * Just print a notification that there was a notification passed up
+	 * from SVD
+	 */
+	struct iwl_rx_packet *pkt = rxb_addr(rxb);
+	struct iwl_bfee_notif *bfee_notif = (void *)pkt->data;
+	u8 Nrx, Ntx;
+	u16 len = le16_to_cpu(bfee_notif->len);
+	struct iwl_rx_phy_res *phy;
+	u32 *non_cfg_buf, *cfg_buf;
+	static u16 bfee_count;
+
+	if (priv->last_phy_res_valid) {
+		phy = &priv->last_phy_res;
+		non_cfg_buf = (u32 *)phy->non_cfg_phy_buf;
+		bfee_notif->timestamp_low =
+			cpu_to_le32(__le64_to_cpu(phy->timestamp));
+		bfee_notif->rssiA =
+			(non_cfg_buf[IWLAGN_RX_RES_RSSI_AB_IDX] &
+			 IWLAGN_OFDM_RSSI_INBAND_A_BITMSK) >>
+			IWLAGN_OFDM_RSSI_A_BIT_POS;
+		bfee_notif->rssiB =
+			(non_cfg_buf[IWLAGN_RX_RES_RSSI_AB_IDX] &
+			 IWLAGN_OFDM_RSSI_INBAND_B_BITMSK) >>
+			IWLAGN_OFDM_RSSI_B_BIT_POS;
+		bfee_notif->rssiC =
+			(non_cfg_buf[IWLAGN_RX_RES_RSSI_C_IDX] &
+			 IWLAGN_OFDM_RSSI_INBAND_C_BITMSK) >>
+			IWLAGN_OFDM_RSSI_C_BIT_POS;
+		bfee_notif->noise = priv->last_rx_noise;
+		bfee_notif->agc =
+			(non_cfg_buf[IWLAGN_RX_RES_AGC_IDX] &
+			 IWLAGN_OFDM_AGC_MSK) >> IWLAGN_OFDM_AGC_BIT_POS;
+		if (phy->cfg_phy_cnt > 0) {
+			cfg_buf = (u32 *)&priv->last_cfg_phy_buf;
+			bfee_notif->antenna_sel = cfg_buf[0];
+		}
+		/* Everything but antennas is in bottom 14 bits */
+		bfee_notif->fake_rate_n_flags =
+			cpu_to_le16(__le32_to_cpu(phy->rate_n_flags) & 0x3fff);
+		
+		//IWL_INFO(priv, "rssis: %u %u %u noise: %d agc: %u "
+		//		"antenna_sel: %02x fake_rate_n_flags=0x%x\n",
+		//		bfee_notif->rssiA, bfee_notif->rssiB,
+		//		bfee_notif->rssiC, bfee_notif->noise,
+		//		bfee_notif->agc, bfee_notif->antenna_sel,
+		//		bfee_notif->fake_rate_n_flags);
+
+		bfee_notif->seq_nr = priv->last_seq_nr;
+
+		/* Increment counter */
+		bfee_count++;
+		bfee_notif->bfee_count = cpu_to_le16(bfee_count);
+	}
+
+	/* Log the bytes to a file */
+	if (priv->connector_log & IWL_CONN_BFEE_NOTIF_MSK)
+		connector_send_msg((void *)bfee_notif,
+			len + sizeof(struct iwl_bfee_notif),
+			IWL_CONN_BFEE_NOTIF);
+
+	/* Now print out that we got a notification, and the size of it */
+	Nrx = bfee_notif->Nrx;
+	Ntx = bfee_notif->Ntx;
+
+	/*
+	 * Each subcarrier uses Ntx * Nrx * 2 * 8 bits for matrix
+	 * (2 signed 8-bit I/Q vals) plus 3 bits for SNR. I think the hardware
+	 * always gives 0 for these 3 bits. See 802.11n spec section 7.3.1.28.
+	 */
+	IWL_DEBUG_RX(priv, "BFEE NOTIFICATION, Nrx=%u Ntx=%u "
+			"len=%u calc_len=%u\n",
+			Nrx, Ntx, len, (30 * (3 + 2 * Nrx * Ntx * 8) + 7) / 8);
+}
